@startuml
skinparam classAttributeIconSize 0
hide empty members
class tower.Tower
{
- List<flyable.Flyable*> observers
+void register(flyable.Flyable* p_flyable)
+void unregister(flyable.Flyable* p_flyable)
#void conditionChanged()
}

class tower.WeatherTower
{
+string getWeather(flyable.aircraft.Coordinates p_coordinates)
+void changeWeather()
}

class WeatherProvider <<Singleton>>
{
-string[] weather
-WeatherProvider()
+string getCurrentWeather(flyable.aircraft.Coordinates p_coordinates)
}

class flyable.aircraft.Coordinates
{
-int longitude
-int latitute
-int height
~flyable.aircraft.Coordinates(int p_longitude, int p_latitude, int p_height)
+int getLongitude()
+int getLatitude()
+int getHeight()
}

class flyable.aircraft.Aircraft
{
#long id
#string name
#Coordinate coordinates
#flyable.aircraft.Aircraft(long p_id, string p_name, flyable.aircraft.Coordinates p_coordinate)
}

abstract flyable.Flyable
{
#tower.WeatherTower weatherTower
+abstract void updateConditions()
+registerTower(tower.WeatherTower* p_tower)
}

class Helicopter
{
+Helicopter(long p_id, string p_name, flyable.aircraft.Coordinates p_coordinate)
+void updateConditions()
}

class JetPlane
{
+JetPlane(long p_id, string p_name, flyable.aircraft.Coordinates p_coordinate)
+void updateConditions()
}

class Baloon
{
+Baloon(long p_id, string p_name, flyable.aircraft.Coordinates p_coordinate)
+void updateConditions()
}

class AircraftFactory <<Singleton>>
{
+flyable.Flyable* newAircraft(string p_type, string p_name, flyable.aircraft.Coordinates p_coordinates)
}

tower.Tower <|-- tower.WeatherTower
tower.Tower -o flyable.Flyable
flyable.aircraft.Coordinates -* flyable.aircraft.Aircraft
flyable.Flyable <|.. flyable.aircraft.Aircraft
flyable.aircraft.Aircraft <|-- Helicopter
flyable.aircraft.Aircraft <|-- JetPlane
flyable.aircraft.Aircraft <|-- Baloon

JetPlane -[hidden]- AircraftFactory
tower.WeatherTower -[hidden]- WeatherProvider

@enduml
